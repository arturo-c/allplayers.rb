#!/usr/bin/ruby
require 'apci_rest'
require 'test/unit'

class TestApcirClient < Test::Unit::TestCase

  def setup
    @apci_session = ApcirClient.new(nil, 'vbox.allplayers.com')
    @login_response = @apci_session.login('user', '')
  end

  def teardown
    @apci_session.logout
  end

  def test_user_get
    # user 1 should always exist, but you might not have permission...
    uid = 1
    user = @apci_session.user_get(uid)
    assert_equal(uid.to_s, user['uid'])
  end

  def test_user_list
    user = @apci_session.user_list({:mail => 'admin@allplayers.com'})
    assert_equal("1", user['item'].first['uid'])
  end

  def test_user_create
    random_first = (0...8).map{65.+(rand(25)).chr}.join
    birthday = Date.new(1983,5,23)
    school = 'The REST School'
    more_params = {:field_school => {:'0' => {:value => school}}}
    response = @apci_session.user_create(
      random_first + '@example.com',
      random_first,
      'FakeLast',
      'Male',
      birthday,
      more_params
    )
    assert_not_nil(response['uid'])
    user = @apci_session.user_get(response['uid'])
    # Check firstname.
    assert_equal(random_first, user['field_firstname'])
    # Check birthday.
    assert_equal(birthday.to_s, Date.parse(user['field_birth_date']).to_s)
    assert_equal(school, user['field_school']['item'].first['value'])
    # @TODO Really should test profile fields, gender, etc.
  end

  def test_user_create_child
    parent_1_uid = 10995
    # TODO - Make someone the parent.
    more_params = {:field_parents => {:'0' => {:value => parent_1_uid.to_s}}}
    random_first = (0...8).map{65.+(rand(25)).chr}.join
    # Make an 11 year old.
    birthday = Date.today - (365 * 11)
    response = @apci_session.user_create(
      random_first + '@example.com',
      random_first,
      'FakeLast',
      'Male',
      birthday,
      more_params
    )
    assert_not_nil(response['uid'])
    user = @apci_session.user_get(response['uid'])
    # Check firstname.
    assert_equal(random_first, user['field_firstname'])
    # Check birthday.
    assert_equal(birthday.to_s, Date.parse(user['field_birth_date']).to_s)
    # Check parent.
    assert_equal(parent_1_uid, user['field_firstname'])
    # @TODO Really should test birthdate, gender, etc.
  end

  def test_node_get
    # node id 6 should exist, fragile...
    node = @apci_session.node_get(6)
    assert_equal("6", node['nid'])
  end

  def test_node_create
    random_title = (0...8).map{65.+(rand(25)).chr}.join
    response = @apci_session.node_create(
      random_title,
      'book',
      'This is a test node generated by test_apci_rest.rb'
    )
    assert_not_nil(response['nid'])
    node = @apci_session.node_get(response['nid'])
    assert_equal(random_title, node['title'])
    assert_equal('book', node['type'])
  end

  def test_node_list
    nid = 6
    nodes = @apci_session.node_list({:nid => nid.to_s})
    assert_equal(nid.to_s, nodes['item'].first['nid'])
  end

  def test_group_create
    random_title = (0...8).map{65.+(rand(25)).chr}.join
    location = {:postal_code => '75067'}
    response = @apci_session.group_create(
      random_title,
     'This is a test group generated by test_apci_rest.rb',
     location,
     ['Sports', 'Other'],
     'Team'
    )
    assert_not_nil(response['nid'])
    group = @apci_session.node_get(response['nid'])
    assert_equal(random_title, group['title'])
    assert_equal('group', group['type'])
    assert_equal('Sports', group['taxonomy']['item'].first['name'])
  end

  def test_group_roles_list
    # node id 116518, dev badminton....
    nid = 116518 # Group ID to test.
    uid = 10055 # Chris Chris...
    roles = @apci_session.group_roles_list(nid)
    #puts roles.to_yaml
    assert_equal(nid.to_s, roles['item'].first['nid'])
    # Test with a user filter.
    roles = @apci_session.group_roles_list(nid,uid)
    # TODO - Crappy test
    assert_not_nil(roles['item'].first)
  end

  def test_group_users_list
    # node id 116518, dev badminton....
    nid = 116518 # Group ID to test.
    users = @apci_session.group_users_list(nid)
    assert_equal(nid.to_s, users['item'].first['nid'])
    assert_not_nil(users['item'].first['uid'])
  end

  def test_user_join_group
    begin
      # node id 116518, dev badminton....
      nid = 116518 # Group ID to test.
      uid = 9735 # Kat...
      @apci_session.user_join_group(uid, nid)
      users = @apci_session.group_users_list(nid)

      users_uids = []
      users['item'].each do | user |
        users_uids.push(user['uid'])
      end

      assert(users_uids.include?(uid.to_s))
    ensure
      # Remove the user.
      @apci_session.user_leave_group(uid, nid)
    end
  end

  def test_user_leave_group
    begin
      # node id 116518, dev badminton....
      nid = 116518 # Group ID to test.
      uid = 12605 # Corey...
      @apci_session.user_leave_group(uid, nid)
      users = @apci_session.group_users_list(nid)


      users_uids = []
      users['item'].each do | user |
        users_uids.push(user['uid'])
      end

      assert(!users_uids.include?(uid.to_s))
    ensure
      # Put the user back.
      # TODO - You just bork'd the roles, need to save them and put them back!
      @apci_session.user_join_group(uid, nid)
    end
  end

  def test_user_groups_list
    uid = 1 # User ID to test.
    groups = @apci_session.user_groups_list(uid)
    assert_equal(uid.to_s, groups['item'].first['uid'])
    assert_not_nil(groups['item'].first['nid'])
  end

  def test_user_group_role_add
    begin
      # node id 116518, dev badminton....
      group_nid = 116518
      uid = 10995 # Glenn Pratt
      role_name = 'Volunteer'

      # Get a rid to assign.
      rid = nil
      roles = @apci_session.group_roles_list(group_nid)

      roles['item'].each do | role |
        if role['name'] == role_name
          rid = role['rid']
        end
      end

      response = @apci_session.user_group_role_add(uid, group_nid, rid) unless rid.nil?

      # Test with a user filter.
      user_roles = @apci_session.group_roles_list(group_nid, uid)

      user_role_names = []
      user_roles['item'].each do | user_role |
        user_role_names.push(user_role['content'])
      end

      assert(['1', 'role already granted'].include?(response))
      assert(user_role_names.include?(role_name))
    ensure
      # TODO - Remove the role.  Not implemented in API.
    end
  end

  def test_taxonomy_vocabulary_list
    vocab = @apci_session.taxonomy_vocabulary_list({:module => 'features_group_category'})
    assert_equal("features_group_category", vocab['item'].first['module'])
  end

  def test_taxonomy_term_list
    term = @apci_session.taxonomy_term_list({:name => 'Other'})
    assert_equal("Other", term['item'].first['name'])
  end

  def test_login
    if @login_response
      response = @login_response
    else
      response = @apci_session.login('user', '')
      @apci_session.logout
      setup()
    end
    assert_not_nil(response['user']['uid'])
    assert_not_nil(response['sessid'])
  end

  def test_logout
    response = @apci_session.logout
    assert_equal("1", response)
    assert_nil(response['sessid'])
    # Should verify we are actually logged out here, can't post, no cookies, etc...
    setup()
  end
end
