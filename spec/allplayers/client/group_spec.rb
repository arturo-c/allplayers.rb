require 'helper'

describe AllPlayers::Client do
  describe "Group" do
    before :all do
      # Create Group.
      $random_title = (0...8).map{65.+(rand(25)).chr}.join
      more_params = {}
      $location = {
        :street => '122 Main ',
        :additional => 'Suite 303',
        :city => 'Lewisville',
        :province => 'TX',  # <-- Test Breaker!
        :postal_code => '75067',
        :country => 'us',
      }
      begin
        $group = $apci_session.group_create(
          $random_title,
          'This is a test group generated by group_spec.rb',
          $location,
          ['Sports', 'Baseball'],
          'Other',
          more_params
        )
      rescue
        pending "until we allow group creation with our API."
      end

      # Create User.
      $birthday = Date.new(1983,5,23)
      $random_first = (0...8).map{65.+(rand(25)).chr}.join
      $user = $apci_session.user_create(
        $random_first + '@example.com',
        $random_first,
        'FakeLast',
        'Male',
        $birthday
      )

      # User Join Group.
      $apci_session.user_join_group($user['uid'], $group['nid'])
      $users = $apci_session.group_users_list($group['nid'])

      $users_uids = []
      $users['item'].each do | user |
        $users_uids.push(user['uid'])
      end

      # User's Groups
      $groups = $apci_session.user_groups_list($user['uid'])

      # Group Roles
      $roles = $apci_session.group_roles_list($group['nid'])

      # Group User Roles (user filter)
      $roles_user = $apci_session.group_roles_list($group['nid'], $user['uid'])
    end

    it "should be created properly." do
      $group['nid'].should_not == nil
      group = $apci_session.node_get($group['nid'])
      group['title'].should == $random_title
      group['type'].should == 'group'
      group['taxonomy']['item'].first['name'].should == 'Sports'
    end

    it "should list roles." do
      $roles['item'].first['nid'].should == $group['nid'].to_s
      # TODO - Crappy test
      $roles_user['item'].first.should_not == nil
    end

    it "should list users." do
      $users['item'].first['nid'].should == $group['nid'].to_s
      $users['item'].first['uid'].should_not == nil
    end

    describe "User" do
      it "should be able to join group." do
        $users_uids.include?($user['uid'].to_s).should == TRUE
      end

      it "should list groups." do
        $groups['item'].first['nid'].should_not == nil
        $groups['item'].first['uid'].should == $user['uid'].to_s
      end

      it "should be able to have a role assigned in a group." do
        role_name = 'Volunteer'

        # Get a rid to assign.
        rid = nil

        $roles['item'].each do | role |
          if role['name'] == role_name
            rid = role['rid']
          end
        end

        response = $apci_session.user_group_role_add($user['uid'], $group['nid'], rid) unless rid.nil?

        # Test with a user filter.
        user_role_names = []
        $roles_user['item'].each do | user_role |
          user_role_names.push(user_role['name'])
        end

        ['1', 'role already granted'].include?(response).should == TRUE
        user_role_names.include?(role_name).should == TRUE
      end
    end
  end
end
